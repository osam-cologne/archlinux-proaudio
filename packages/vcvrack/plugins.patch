diff --git a/plugin.mk b/plugin.mk
index 88a51f51..d287c108 100644
--- a/plugin.mk
+++ b/plugin.mk
@@ -1,9 +1,13 @@
+ifndef ARCH_LIN
 ifndef RACK_DIR
 $(error RACK_DIR is not defined)
 endif
+else
+RACK_DIR ?= /usr/share/vcvrack
+endif
 
-SLUG := $(shell jq -r .slug plugin.json)
-VERSION := $(shell jq -r .version plugin.json)
+SLUG ?= $(shell jq -r .slug plugin.json)
+VERSION ?= $(shell jq -r .version plugin.json)
 
 ifndef SLUG
 $(error SLUG could not be found in manifest)
@@ -27,10 +31,10 @@ ifdef ARCH_LIN
 	TARGET := plugin.so
 	# This prevents static variables in the DSO (dynamic shared object) from being preserved after dlclose().
 	FLAGS += -fno-gnu-unique
-	# When Rack loads a plugin, it symlinks /tmp/Rack2 to its system dir, so the plugin can link to libRack.
-	LDFLAGS += -Wl,-rpath=/tmp/Rack2
-	# Since the plugin's compiler could be a different version than Rack's compiler, link libstdc++ and libgcc statically to avoid ABI issues.
-	LDFLAGS += -static-libstdc++ -static-libgcc
+	# Installed includes
+	FLAGS += -I/usr/include/vcvrack -I/usr/include/vcvrack/dep
+	# Link shared libs
+	LDFLAGS += -ldl
 	RACK_USER_DIR ?= $(HOME)/.Rack2
 endif
 
diff --git a/src/plugin.cpp b/src/plugin.cpp
index 0b969f88..e1e460bd 100644
--- a/src/plugin.cpp
+++ b/src/plugin.cpp
@@ -260,6 +260,9 @@ void init() {
 	if (settings::safeMode)
 		return;
 
+	// Load system-wide plugins
+	loadPlugins(asset::system("plugins"));
+
 	// Extract packages and load plugins
 	extractPackages(pluginsPath);
 	loadPlugins(pluginsPath);
