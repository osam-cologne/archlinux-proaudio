diff -uNr string-machine-0.1.0/dpf/Makefile.base.mk string-machine-0.1.0.new/dpf/Makefile.base.mk
--- string-machine-0.1.0/dpf/Makefile.base.mk	2019-06-24 12:00:44.000000000 +0200
+++ string-machine-0.1.0.new/dpf/Makefile.base.mk	2022-03-18 23:51:39.644338542 +0100
@@ -9,8 +9,17 @@
 CXX ?= g++
 
 # ---------------------------------------------------------------------------------------------------------------------
+# Protect against multiple inclusion
+
+ifneq ($(DPF_MAKEFILE_BASE_INCLUDED),true)
+
+DPF_MAKEFILE_BASE_INCLUDED = true
+
+# ---------------------------------------------------------------------------------------------------------------------
 # Auto-detect OS if not defined
 
+TARGET_MACHINE := $(shell $(CC) -dumpmachine)
+
 ifneq ($(BSD),true)
 ifneq ($(HAIKU),true)
 ifneq ($(HURD),true)
@@ -18,18 +27,16 @@
 ifneq ($(MACOS),true)
 ifneq ($(WINDOWS),true)
 
-TARGET_MACHINE := $(shell $(CC) -dumpmachine)
 ifneq (,$(findstring bsd,$(TARGET_MACHINE)))
 BSD=true
 endif
 ifneq (,$(findstring haiku,$(TARGET_MACHINE)))
 HAIKU=true
 endif
-ifneq (,$(findstring gnu,$(TARGET_MACHINE)))
-HURD=true
-endif
 ifneq (,$(findstring linux,$(TARGET_MACHINE)))
 LINUX=true
+else ifneq (,$(findstring gnu,$(TARGET_MACHINE)))
+HURD=true
 endif
 ifneq (,$(findstring apple,$(TARGET_MACHINE)))
 MACOS=true
@@ -37,6 +44,9 @@
 ifneq (,$(findstring mingw,$(TARGET_MACHINE)))
 WINDOWS=true
 endif
+ifneq (,$(findstring windows,$(TARGET_MACHINE)))
+WINDOWS=true
+endif
 
 endif
 endif
@@ -46,6 +56,32 @@
 endif
 
 # ---------------------------------------------------------------------------------------------------------------------
+# Auto-detect the processor
+
+TARGET_PROCESSOR := $(firstword $(subst -, ,$(TARGET_MACHINE)))
+
+ifneq (,$(filter i%86,$(TARGET_PROCESSOR)))
+CPU_I386=true
+CPU_I386_OR_X86_64=true
+endif
+ifneq (,$(filter x86_64,$(TARGET_PROCESSOR)))
+CPU_X86_64=true
+CPU_I386_OR_X86_64=true
+endif
+ifneq (,$(filter arm%,$(TARGET_PROCESSOR)))
+CPU_ARM=true
+CPU_ARM_OR_AARCH64=true
+endif
+ifneq (,$(filter arm64%,$(TARGET_PROCESSOR)))
+CPU_ARM64=true
+CPU_ARM_OR_AARCH64=true
+endif
+ifneq (,$(filter aarch64%,$(TARGET_PROCESSOR)))
+CPU_AARCH64=true
+CPU_ARM_OR_AARCH64=true
+endif
+
+# ---------------------------------------------------------------------------------------------------------------------
 # Set PKG_CONFIG (can be overridden by environment variable)
 
 ifeq ($(WINDOWS),true)
@@ -106,11 +142,24 @@
 # Set build and link flags
 
 BASE_FLAGS = -Wall -Wextra -pipe -MD -MP
-BASE_OPTS  = -O3 -ffast-math -mtune=generic -msse -msse2 -fdata-sections -ffunction-sections
+BASE_OPTS  = -O3 -ffast-math -fdata-sections -ffunction-sections
+
+ifeq ($(CPU_I386_OR_X86_64),true)
+BASE_OPTS += -mtune=generic -msse -msse2 -mfpmath=sse
+endif
+
+ifeq ($(CPU_ARM),true)
+ifneq ($(CPU_ARM64),true)
+BASE_OPTS += -mfpu=neon-vfpv4 -mfloat-abi=hard
+endif
+endif
 
 ifeq ($(MACOS),true)
 # MacOS linker flags
 LINK_OPTS  = -fdata-sections -ffunction-sections -Wl,-dead_strip -Wl,-dead_strip_dylibs
+ifneq ($(SKIP_STRIPPING),true)
+LINK_OPTS += -Wl,-x
+endif
 else
 # Common linker flags
 LINK_OPTS  = -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-O1 -Wl,--as-needed
@@ -120,19 +169,13 @@
 endif
 
 ifeq ($(NOOPT),true)
-# No CPU-specific optimization flags
+# Non-CPU-specific optimization flags
 BASE_OPTS  = -O2 -ffast-math -fdata-sections -ffunction-sections
 endif
 
 ifeq ($(WINDOWS),true)
-# mingw has issues with this specific optimization
-# See https://github.com/falkTX/Carla/issues/696
-BASE_OPTS  += -fno-rerun-cse-after-loop
-# See https://github.com/falkTX/Carla/issues/855
+# Needed for windows, see https://github.com/falkTX/Carla/issues/855
 BASE_OPTS  += -mstackrealign
-ifeq ($(BUILDING_FOR_WINDOWS),true)
-BASE_FLAGS += -DBUILDING_CARLA_FOR_WINDOWS
-endif
 else
 # Not needed for Windows
 BASE_FLAGS += -fPIC -DPIC
@@ -147,7 +190,7 @@
 endif
 
 BUILD_C_FLAGS   = $(BASE_FLAGS) -std=gnu99 $(CFLAGS)
-BUILD_CXX_FLAGS = $(BASE_FLAGS) -std=gnu++0x $(CXXFLAGS)
+BUILD_CXX_FLAGS = $(BASE_FLAGS) -std=gnu++11 $(CXXFLAGS)
 LINK_FLAGS      = $(LINK_OPTS) $(LDFLAGS)
 
 ifneq ($(MACOS),true)
@@ -161,7 +204,7 @@
 
 ifeq ($(WINDOWS),true)
 # Always build statically on windows
-LINK_FLAGS     += -static
+LINK_FLAGS     += -static -static-libgcc -static-libstdc++
 endif
 
 # ---------------------------------------------------------------------------------------------------------------------
@@ -169,7 +212,7 @@
 
 ifeq ($(TESTBUILD),true)
 BASE_FLAGS += -Werror -Wcast-qual -Wconversion -Wformat -Wformat-security -Wredundant-decls -Wshadow -Wstrict-overflow -fstrict-overflow -Wundef -Wwrite-strings
-BASE_FLAGS += -Wpointer-arith -Wabi -Winit-self -Wuninitialized -Wstrict-overflow=5
+BASE_FLAGS += -Wpointer-arith -Wabi=98 -Winit-self -Wuninitialized -Wstrict-overflow=5
 # BASE_FLAGS += -Wfloat-equal
 ifeq ($(CC),clang)
 BASE_FLAGS += -Wdocumentation -Wdocumentation-unknown-command
@@ -192,33 +235,76 @@
 
 HAVE_CAIRO  = $(shell $(PKG_CONFIG) --exists cairo && echo true)
 
-ifeq ($(HAIKU_OR_MACOS_OR_WINDOWS),true)
+# Vulkan is not supported yet
+# HAVE_VULKAN = $(shell $(PKG_CONFIG) --exists vulkan && echo true)
+
+ifeq ($(MACOS_OR_WINDOWS),true)
 HAVE_OPENGL = true
 else
 HAVE_OPENGL = $(shell $(PKG_CONFIG) --exists gl && echo true)
-HAVE_X11    = $(shell $(PKG_CONFIG) --exists x11 && echo true)
+ifneq ($(HAIKU),true)
+HAVE_X11     = $(shell $(PKG_CONFIG) --exists x11 && echo true)
+HAVE_XCURSOR = $(shell $(PKG_CONFIG) --exists xcursor && echo true)
+HAVE_XEXT    = $(shell $(PKG_CONFIG) --exists xext && echo true)
+HAVE_XRANDR  = $(shell $(PKG_CONFIG) --exists xrandr && echo true)
+endif
 endif
 
 # ---------------------------------------------------------------------------------------------------------------------
 # Check for optional libraries
 
-HAVE_JACK  = $(shell $(PKG_CONFIG) --exists jack && echo true)
 HAVE_LIBLO = $(shell $(PKG_CONFIG) --exists liblo && echo true)
 
+ifeq ($(MACOS),true)
+HAVE_RTAUDIO    = true
+else ifeq ($(WINDOWS),true)
+HAVE_RTAUDIO    = true
+else ifneq ($(HAIKU),true)
+HAVE_ALSA       = $(shell $(PKG_CONFIG) --exists alsa && echo true)
+HAVE_PULSEAUDIO = $(shell $(PKG_CONFIG) --exists libpulse-simple && echo true)
+ifeq ($(HAVE_ALSA),true)
+HAVE_RTAUDIO    = true
+else ifeq ($(HAVE_PULSEAUDIO),true)
+HAVE_RTAUDIO    = true
+endif
+endif
+
+# backwards compat
+HAVE_JACK = true
+
 # ---------------------------------------------------------------------------------------------------------------------
 # Set Generic DGL stuff
 
+ifeq ($(HAIKU),true)
+DGL_SYSTEM_LIBS += -lbe
+endif
+
 ifeq ($(MACOS),true)
-DGL_SYSTEM_LIBS  += -framework Cocoa
+DGL_SYSTEM_LIBS += -framework Cocoa -framework CoreVideo
 endif
 
 ifeq ($(WINDOWS),true)
-DGL_SYSTEM_LIBS  += -lgdi32
+DGL_SYSTEM_LIBS += -lgdi32 -lcomdlg32
 endif
 
 ifneq ($(HAIKU_OR_MACOS_OR_WINDOWS),true)
-DGL_FLAGS        += $(shell $(PKG_CONFIG) --cflags x11)
-DGL_SYSTEM_LIBS  += $(shell $(PKG_CONFIG) --libs x11)
+ifeq ($(HAVE_X11),true)
+DGL_FLAGS       += $(shell $(PKG_CONFIG) --cflags x11) -DHAVE_X11
+DGL_SYSTEM_LIBS += $(shell $(PKG_CONFIG) --libs x11)
+ifeq ($(HAVE_XCURSOR),true)
+# TODO -DHAVE_XCURSOR
+DGL_FLAGS       += $(shell $(PKG_CONFIG) --cflags xcursor)
+DGL_SYSTEM_LIBS += $(shell $(PKG_CONFIG) --libs xcursor)
+endif
+ifeq ($(HAVE_XEXT),true)
+DGL_FLAGS       += $(shell $(PKG_CONFIG) --cflags xext) -DHAVE_XEXT -DHAVE_XSYNC
+DGL_SYSTEM_LIBS += $(shell $(PKG_CONFIG) --libs xext)
+endif
+ifeq ($(HAVE_XRANDR),true)
+DGL_FLAGS       += $(shell $(PKG_CONFIG) --cflags xrandr) -DHAVE_XRANDR
+DGL_SYSTEM_LIBS += $(shell $(PKG_CONFIG) --libs xrandr)
+endif
+endif
 endif
 
 # ---------------------------------------------------------------------------------------------------------------------
@@ -242,7 +328,13 @@
 
 DGL_FLAGS   += -DHAVE_OPENGL
 
+ifeq ($(HAIKU),true)
+OPENGL_FLAGS = $(shell $(PKG_CONFIG) --cflags gl)
+OPENGL_LIBS  = $(shell $(PKG_CONFIG) --libs gl)
+endif
+
 ifeq ($(MACOS),true)
+OPENGL_FLAGS = -DGL_SILENCE_DEPRECATION=1 -Wno-deprecated-declarations
 OPENGL_LIBS  = -framework OpenGL
 endif
 
@@ -250,7 +342,7 @@
 OPENGL_LIBS  = -lopengl32
 endif
 
-ifneq ($(MACOS_OR_WINDOWS),true)
+ifneq ($(HAIKU_OR_MACOS_OR_WINDOWS),true)
 OPENGL_FLAGS = $(shell $(PKG_CONFIG) --cflags gl x11)
 OPENGL_LIBS  = $(shell $(PKG_CONFIG) --libs gl x11)
 endif
@@ -260,6 +352,66 @@
 endif
 
 # ---------------------------------------------------------------------------------------------------------------------
+# Set Stub specific stuff
+
+ifeq ($(HAIKU_OR_MACOS_OR_WINDOWS),true)
+HAVE_STUB = true
+else
+HAVE_STUB = $(HAVE_X11)
+endif
+
+# ---------------------------------------------------------------------------------------------------------------------
+# Set Vulkan specific stuff
+
+ifeq ($(HAVE_VULKAN),true)
+
+DGL_FLAGS   += -DHAVE_VULKAN
+
+VULKAN_FLAGS  = $(shell $(PKG_CONFIG) --cflags vulkan)
+VULKAN_LIBS   = $(shell $(PKG_CONFIG) --libs vulkan)
+
+ifneq ($(WINDOWS),true)
+VULKAN_LIBS  += -ldl
+endif
+
+endif
+
+# ---------------------------------------------------------------------------------------------------------------------
+# Set optional libraries specific stuff
+
+ifeq ($(HAVE_ALSA),true)
+ALSA_FLAGS = $(shell $(PKG_CONFIG) --cflags alsa)
+ALSA_LIBS  = $(shell $(PKG_CONFIG) --libs alsa)
+endif
+
+ifeq ($(HAVE_LIBLO),true)
+LIBLO_FLAGS = $(shell $(PKG_CONFIG) --cflags liblo)
+LIBLO_LIBS  = $(shell $(PKG_CONFIG) --libs liblo)
+endif
+
+ifeq ($(HAVE_PULSEAUDIO),true)
+PULSEAUDIO_FLAGS = $(shell $(PKG_CONFIG) --cflags libpulse-simple)
+PULSEAUDIO_LIBS  = $(shell $(PKG_CONFIG) --libs libpulse-simple)
+endif
+
+ifneq ($(HAIKU_OR_MACOS_OR_WINDOWS),true)
+SHARED_MEMORY_LIBS = -lrt
+endif
+
+# ---------------------------------------------------------------------------------------------------------------------
+# Backwards-compatible HAVE_DGL
+
+ifeq ($(MACOS_OR_WINDOWS),true)
+HAVE_DGL = true
+else ifeq ($(HAVE_OPENGL),true)
+ifeq ($(HAIKU),true)
+HAVE_DGL = true
+else
+HAVE_DGL = $(HAVE_X11)
+endif
+endif
+
+# ---------------------------------------------------------------------------------------------------------------------
 # Set app extension
 
 ifeq ($(WINDOWS),true)
@@ -289,3 +441,61 @@
 endif
 
 # ---------------------------------------------------------------------------------------------------------------------
+# Handle the verbosity switch
+
+ifeq ($(VERBOSE),true)
+SILENT =
+else
+SILENT = @
+endif
+
+# ---------------------------------------------------------------------------------------------------------------------
+# all needs to be first
+
+all:
+
+# ---------------------------------------------------------------------------------------------------------------------
+# helper to print what is available/possible to build
+
+print_available = @echo $(1): $(shell echo $($(1)) | grep -q true && echo Yes || echo No)
+
+features:
+	@echo === Detected CPU
+	$(call print_available,CPU_AARCH64)
+	$(call print_available,CPU_ARM)
+	$(call print_available,CPU_ARM64)
+	$(call print_available,CPU_ARM_OR_AARCH64)
+	$(call print_available,CPU_I386)
+	$(call print_available,CPU_I386_OR_X86_64)
+	@echo === Detected OS
+	$(call print_available,BSD)
+	$(call print_available,HAIKU)
+	$(call print_available,HURD)
+	$(call print_available,LINUX)
+	$(call print_available,MACOS)
+	$(call print_available,WINDOWS)
+	$(call print_available,HAIKU_OR_MACOS_OR_WINDOWS)
+	$(call print_available,LINUX_OR_MACOS)
+	$(call print_available,MACOS_OR_WINDOWS)
+	$(call print_available,UNIX)
+	@echo === Detected features
+	$(call print_available,HAVE_ALSA)
+	$(call print_available,HAVE_CAIRO)
+	$(call print_available,HAVE_DGL)
+	$(call print_available,HAVE_LIBLO)
+	$(call print_available,HAVE_OPENGL)
+	$(call print_available,HAVE_PULSEAUDIO)
+	$(call print_available,HAVE_RTAUDIO)
+	$(call print_available,HAVE_STUB)
+	$(call print_available,HAVE_VULKAN)
+	$(call print_available,HAVE_X11)
+	$(call print_available,HAVE_XCURSOR)
+	$(call print_available,HAVE_XEXT)
+	$(call print_available,HAVE_XRANDR)
+
+# ---------------------------------------------------------------------------------------------------------------------
+# Protect against multiple inclusion
+
+endif # DPF_MAKEFILE_BASE_INCLUDED
+
+# ---------------------------------------------------------------------------------------------------------------------
